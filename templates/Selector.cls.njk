/**
* This is a basic selector for {{ objecApiName }}
**/

global with sharing class {{ className }} extends bbvacep.fflib_SObjectSelector implements {{ interfaceName }} {

    public static {{ interfaceName }} newInstance() {
        return ({{ interfaceName }}) {{ applicationClass }}.SELECTOR.newInstance({{ objecApiName }}.SObjectType);
    }

    /**
    * Default constructor. Reads the fields from the getSObjectFieldList() method
    **/
    global {{ className }}() {
        super(false);
    }

    /**
    * Constructor that allows a parameter to use FieldSets if True
    **/
    global {{ className }}(Boolean includeFieldSetFields) {
        super(includeFieldSetFields);
        this.setDefaultFieldSet({{ applicationClass }}.DEFAULTFIELDSET);
    }

    /**
    * Constructor that allows a parameter to use the selected fieldsets
    **/
    global {{ className }}(List <String> fieldSetList) {
        super(true);
        this.setFieldSetList(fieldSetList);
    }

    /**
    * Returns a default list of fields if FieldSets functionality is not used (No Dependency Injection Pattern here!)
    **/
    public override List<Schema.SObjectField> getSObjectFieldList() {
        return new List<Schema.SObjectField> {
            {{ fieldsToInclude }}
        };
    }

    public override Schema.SObjectType getSObjectType() {
        return {{ objecApiName }}.sObjectType;
    }

    global List<{{ objecApiName }}> selectById(Set<ID> idSet) {
        return (List<{{ objecApiName }}>) selectSObjectsById(idSet);
    }
}
